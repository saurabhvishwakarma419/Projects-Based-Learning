
import React, { useState } from 'react';
import { Upload, Image, Trash2, Download, X, Search, Grid, List, User, LogOut, Heart, Eye } from 'lucide-react';

const PhotoGalleryApp = () => {
  const [photos, setPhotos] = useState([
    {
      id: '1',
      url: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=800&h=600&fit=crop',
      title: 'Mountain Sunset',
      description: 'Beautiful sunset over the mountains',
      uploadedBy: 'John Doe',
      uploadDate: new Date('2024-09-15'),
      likes: 42,
      views: 156,
      tags: ['nature', 'sunset', 'mountains']
    },
    {
      id: '2',
      url: 'https://images.unsplash.com/photo-1469474968028-56623f02e42e?w=800&h=600&fit=crop',
      title: 'Forest Path',
      description: 'Misty morning in the forest',
      uploadedBy: 'Jane Smith',
      uploadDate: new Date('2024-09-20'),
      likes: 38,
      views: 142,
      tags: ['nature', 'forest', 'morning']
    },
    {
      id: '3',
      url: 'https://images.unsplash.com/photo-1470071459604-3b5ec3a7fe05?w=800&h=600&fit=crop',
      title: 'Starry Night',
      description: 'Stars over the desert',
      uploadedBy: 'Mike Johnson',
      uploadDate: new Date('2024-09-25'),
      likes: 67,
      views: 203,
      tags: ['night', 'stars', 'desert']
    },
    {
      id: '4',
      url: 'https://images.unsplash.com/photo-1426604966848-d7adac402bff?w=800&h=600&fit=crop',
      title: 'Ocean View',
      description: 'Peaceful ocean waves',
      uploadedBy: 'Sarah Lee',
      uploadDate: new Date('2024-09-28'),
      likes: 54,
      views: 178,
      tags: ['ocean', 'beach', 'waves']
    },
    {
      id: '5',
      url: 'https://images.unsplash.com/photo-1511593358241-7eea1f3c84e5?w=800&h=600&fit=crop',
      title: 'City Lights',
      description: 'Urban nightscape',
      uploadedBy: 'Alex Chen',
      uploadDate: new Date('2024-09-29'),
      likes: 89,
      views: 245,
      tags: ['city', 'urban', 'night']
    },
    {
      id: '6',
      url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=800&h=600&fit=crop',
      title: 'Portrait',
      description: 'Natural light portrait',
      uploadedBy: 'Emma Davis',
      uploadDate: new Date('2024-09-30'),
      likes: 72,
      views: 198,
      tags: ['portrait', 'people', 'photography']
    }
  ]);

  const [user] = useState({
    name: 'Guest User',
    email: 'guest@example.com',
    isAuthenticated: true
  });

  const [selectedPhoto, setSelectedPhoto] = useState(null);
  const [viewMode, setViewMode] = useState('grid');
  const [searchTerm, setSearchTerm] = useState('');
  const [uploadModal, setUploadModal] = useState(false);
  const [newPhoto, setNewPhoto] = useState({
    title: '',
    description: '',
    tags: ''
  });
  const [likedPhotos, setLikedPhotos] = useState([]);

  const filteredPhotos = photos.filter(photo => 
    photo.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    photo.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
    photo.tags.some(tag => tag.toLowerCase().includes(searchTerm.toLowerCase()))
  );

  const handleLike = (photoId) => {
    if (likedPhotos.includes(photoId)) {
      setLikedPhotos(likedPhotos.filter(id => id !== photoId));
      setPhotos(photos.map(p => 
        p.id === photoId ? { ...p, likes: p.likes - 1 } : p
      ));
    } else {
      setLikedPhotos([...likedPhotos, photoId]);
      setPhotos(photos.map(p => 
        p.id === photoId ? { ...p, likes: p.likes + 1 } : p
      ));
    }
  };

  const handleDelete = (photoId) => {
    if (window.confirm('Are you sure you want to delete this photo?')) {
      setPhotos(photos.filter(p => p.id !== photoId));
      setSelectedPhoto(null);
    }
  };

  const handleDownload = (photo) => {
    alert(`Downloading: ${photo.title}`);
  };

  const handleUpload = () => {
    if (newPhoto.title && newPhoto.description) {
      const photo = {
        id: Date.now().toString(),
        url: 'https://images.unsplash.com/photo-1682687220742-aba13b6e50ba?w=800&h=600&fit=crop',
        title: newPhoto.title,
        description: newPhoto.description,
        uploadedBy: user.name,
        uploadDate: new Date(),
        likes: 0,
        views: 0,
        tags: newPhoto.tags.split(',').map(t => t.trim()).filter(t => t)
      };
      setPhotos([photo, ...photos]);
      setUploadModal(false);
      setNewPhoto({ title: '', description: '', tags: '' });
    }
  };

  const openPhotoDetail = (photo) => {
    setSelectedPhoto(photo);
    setPhotos(photos.map(p => 
      p.id === photo.id ? { ...p, views: p.views + 1 } : p
    ));
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-gray-800 to-gray-900 text-white">
      {/* Header */}
      <header className="bg-gray-800/50 backdrop-blur-sm border-b border-gray-700 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-500 rounded-lg flex items-center justify-center">
                <Image className="w-6 h-6" />
              </div>
              <div>
                <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-400 to-pink-400 bg-clip-text text-transparent">
                  PhotoGallery
                </h1>
                <p className="text-xs text-gray-400">Firebase Powered</p>
              </div>
            </div>

            <div className="flex items-center gap-4">
              <div className="flex items-center gap-2 bg-gray-700/50 px-3 py-2 rounded-lg">
                <User className="w-4 h-4 text-gray-400" />
                <span className="text-sm">{user.name}</span>
              </div>
              <button className="p-2 hover:bg-gray-700 rounded-lg transition">
                <LogOut className="w-5 h-5" />
              </button>
            </div>
          </div>

          {/* Search and Controls */}
          <div className="flex items-center gap-4 mt-4 flex-wrap">
            <div className="flex-1 min-w-[200px] relative">
              <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
              <input
                type="text"
                placeholder="Search photos by title, description, or tags..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full bg-gray-700/50 border border-gray-600 rounded-lg pl-10 pr-4 py-2 focus:outline-none focus:border-purple-500 transition"
              />
            </div>

            <div className="flex items-center gap-2 bg-gray-700/50 rounded-lg p-1">
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded transition ${viewMode === 'grid' ? 'bg-purple-600' : 'hover:bg-gray-600'}`}
              >
                <Grid className="w-5 h-5" />
              </button>
              <button
                onClick={() => setViewMode('list')}
                className={`p-2 rounded transition ${viewMode === 'list' ? 'bg-purple-600' : 'hover:bg-gray-600'}`}
              >
                <List className="w-5 h-5" />
              </button>
            </div>

            <button
              onClick={() => setUploadModal(true)}
              className="flex items-center gap-2 bg-gradient-to-r from-purple-600 to-pink-600 px-4 py-2 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition"
            >
              <Upload className="w-5 h-5" />
              Upload Photo
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 py-8">
        {/* Stats */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Photos</p>
                <p className="text-3xl font-bold">{photos.length}</p>
              </div>
              <Image className="w-10 h-10 text-purple-500" />
            </div>
          </div>

          <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Likes</p>
                <p className="text-3xl font-bold">{photos.reduce((sum, p) => sum + p.likes, 0)}</p>
              </div>
              <Heart className="w-10 h-10 text-pink-500" />
            </div>
          </div>

          <div className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg p-4">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-gray-400 text-sm">Total Views</p>
                <p className="text-3xl font-bold">{photos.reduce((sum, p) => sum + p.views, 0)}</p>
              </div>
              <Eye className="w-10 h-10 text-blue-500" />
            </div>
          </div>
        </div>

        {/* Photo Gallery */}
        {filteredPhotos.length === 0 ? (
          <div className="text-center py-16">
            <Image className="w-16 h-16 mx-auto mb-4 text-gray-600" />
            <p className="text-xl text-gray-400">No photos found</p>
          </div>
        ) : viewMode === 'grid' ? (
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
            {filteredPhotos.map(photo => (
              <div
                key={photo.id}
                className="group bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg overflow-hidden hover:border-purple-500 transition cursor-pointer"
                onClick={() => openPhotoDetail(photo)}
              >
                <div className="relative aspect-video overflow-hidden">
                  <img
                    src={photo.url}
                    alt={photo.title}
                    className="w-full h-full object-cover group-hover:scale-110 transition duration-300"
                  />
                  <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/20 to-transparent opacity-0 group-hover:opacity-100 transition flex items-end p-4">
                    <div className="flex gap-2 w-full">
                      <button
                        onClick={(e) => {
                          e.stopPropagation();
                          handleLike(photo.id);
                        }}
                        className="flex items-center gap-1 bg-black/50 px-3 py-1 rounded-full text-sm"
                      >
                        <Heart className={`w-4 h-4 ${likedPhotos.includes(photo.id) ? 'fill-pink-500 text-pink-500' : ''}`} />
                        {photo.likes}
                      </button>
                      <button className="flex items-center gap-1 bg-black/50 px-3 py-1 rounded-full text-sm">
                        <Eye className="w-4 h-4" />
                        {photo.views}
                      </button>
                    </div>
                  </div>
                </div>
                <div className="p-4">
                  <h3 className="font-semibold text-lg mb-1 truncate">{photo.title}</h3>
                  <p className="text-gray-400 text-sm mb-2 line-clamp-2">{photo.description}</p>
                  <div className="flex items-center justify-between text-xs text-gray-500">
                    <span>{photo.uploadedBy}</span>
                    <span>{photo.uploadDate.toLocaleDateString()}</span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="space-y-4">
            {filteredPhotos.map(photo => (
              <div
                key={photo.id}
                className="bg-gray-800/50 backdrop-blur-sm border border-gray-700 rounded-lg overflow-hidden hover:border-purple-500 transition cursor-pointer"
                onClick={() => openPhotoDetail(photo)}
              >
                <div className="flex gap-4 p-4">
                  <img
                    src={photo.url}
                    alt={photo.title}
                    className="w-48 h-32 object-cover rounded-lg"
                  />
                  <div className="flex-1">
                    <h3 className="font-semibold text-xl mb-2">{photo.title}</h3>
                    <p className="text-gray-400 mb-3">{photo.description}</p>
                    <div className="flex items-center gap-4 text-sm text-gray-500">
                      <span className="flex items-center gap-1">
                        <Heart className={`w-4 h-4 ${likedPhotos.includes(photo.id) ? 'fill-pink-500 text-pink-500' : ''}`} />
                        {photo.likes} likes
                      </span>
                      <span className="flex items-center gap-1">
                        <Eye className="w-4 h-4" />
                        {photo.views} views
                      </span>
                      <span>{photo.uploadedBy}</span>
                      <span>{photo.uploadDate.toLocaleDateString()}</span>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        )}
      </main>

      {/* Upload Modal */}
      {uploadModal && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-gray-800 border border-gray-700 rounded-lg max-w-lg w-full p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold">Upload New Photo</h2>
              <button
                onClick={() => setUploadModal(false)}
                className="p-2 hover:bg-gray-700 rounded-lg transition"
              >
                <X className="w-6 h-6" />
              </button>
            </div>

            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-2">Title</label>
                <input
                  type="text"
                  value={newPhoto.title}
                  onChange={(e) => setNewPhoto({ ...newPhoto, title: e.target.value })}
                  placeholder="Enter photo title"
                  className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-2 focus:outline-none focus:border-purple-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Description</label>
                <textarea
                  value={newPhoto.description}
                  onChange={(e) => setNewPhoto({ ...newPhoto, description: e.target.value })}
                  placeholder="Enter photo description"
                  rows="3"
                  className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-2 focus:outline-none focus:border-purple-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium mb-2">Tags (comma-separated)</label>
                <input
                  type="text"
                  value={newPhoto.tags}
                  onChange={(e) => setNewPhoto({ ...newPhoto, tags: e.target.value })}
                  placeholder="e.g. nature, sunset, landscape"
                  className="w-full bg-gray-700/50 border border-gray-600 rounded-lg px-4 py-2 focus:outline-none focus:border-purple-500"
                />
              </div>

              <div className="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center hover:border-purple-500 transition cursor-pointer">
                <Upload className="w-12 h-12 mx-auto mb-3 text-gray-500" />
                <p className="text-gray-400">Click to select image or drag and drop</p>
                <p className="text-sm text-gray-500 mt-1">PNG, JPG up to 10MB</p>
              </div>

              <button
                onClick={handleUpload}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 py-3 rounded-lg font-semibold hover:from-purple-700 hover:to-pink-700 transition"
              >
                Upload Photo
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Photo Detail Modal */}
      {selectedPhoto && (
        <div className="fixed inset-0 bg-black/90 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="max-w-6xl w-full max-h-[90vh] overflow-auto">
            <div className="bg-gray-800 border border-gray-700 rounded-lg overflow-hidden">
              <div className="flex items-center justify-between p-4 border-b border-gray-700">
                <h2 className="text-2xl font-bold">{selectedPhoto.title}</h2>
                <button
                  onClick={() => setSelectedPhoto(null)}
                  className="p-2 hover:bg-gray-700 rounded-lg transition"
                >
                  <X className="w-6 h-6" />
                </button>
              </div>

              <div className="grid md:grid-cols-2 gap-6 p-6">
                <div>
                  <img
                    src={selectedPhoto.url}
                    alt={selectedPhoto.title}
                    className="w-full rounded-lg"
                  />
                </div>

                <div className="space-y-4">
                  <div>
                    <h3 className="text-sm font-medium text-gray-400 mb-1">Description</h3>
                    <p className="text-gray-200">{selectedPhoto.description}</p>
                  </div>

                  <div>
                    <h3 className="text-sm font-medium text-gray-400 mb-2">Tags</h3>
                    <div className="flex flex-wrap gap-2">
                      {selectedPhoto.tags.map((tag, i) => (
                        <span key={i} className="bg-purple-600/20 text-purple-400 px-3 py-1 rounded-full text-sm">
                          #{tag}
                        </span>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-2 gap-4 p-4 bg-gray-700/50 rounded-lg">
                    <div>
                      <p className="text-gray-400 text-sm">Uploaded By</p>
                      <p className="font-semibold">{selectedPhoto.uploadedBy}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Upload Date</p>
                      <p className="font-semibold">{selectedPhoto.uploadDate.toLocaleDateString()}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Likes</p>
                      <p className="font-semibold">{selectedPhoto.likes}</p>
                    </div>
                    <div>
                      <p className="text-gray-400 text-sm">Views</p>
                      <p className="font-semibold">{selectedPhoto.views}</p>
                    </div>
                  </div>

                  <div className="flex gap-3">
                    <button
                      onClick={() => handleLike(selectedPhoto.id)}
                      className={`flex-1 flex items-center justify-center gap-2 py-3 rounded-lg font-semibold transition ${
                        likedPhotos.includes(selectedPhoto.id)
                          ? 'bg-pink-600 hover:bg-pink-700'
                          : 'bg-gray-700 hover:bg-gray-600'
                      }`}
                    >
                      <Heart className={`w-5 h-5 ${likedPhotos.includes(selectedPhoto.id) ? 'fill-current' : ''}`} />
                      {likedPhotos.includes(selectedPhoto.id) ? 'Liked' : 'Like'}
                    </button>
                    <button
                      onClick={() => handleDownload(selectedPhoto)}
                      className="flex-1 flex items-center justify-center gap-2 bg-blue-600 hover:bg-blue-700 py-3 rounded-lg font-semibold transition"
                    >
                      <Download className="w-5 h-5" />
                      Download
                    </button>
                  </div>

                  <button
                    onClick={() => handleDelete(selectedPhoto.id)}
                    className="w-full flex items-center justify-center gap-2 bg-red-600 hover:bg-red-700 py-3 rounded-lg font-semibold transition"
                  >
                    <Trash2 className="w-5 h-5" />
                    Delete Photo
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default PhotoGalleryApp;
