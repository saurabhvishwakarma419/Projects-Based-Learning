import React, { useState, useEffect } from 'react';
import { Wind, AlertTriangle, ThermometerSun, Droplets, Eye, Activity, MapPin, TrendingUp, TrendingDown, Clock, Calendar, CloudRain, Cigarette, Factory, Car, TreePine, RefreshCw, Download, Share2 } from 'lucide-react';
import { LineChart, Line, AreaChart, Area, BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend, PieChart, Pie, Cell } from 'recharts';

const AirQualityMonitoring = () => {
  const [selectedStation, setSelectedStation] = useState('downtown');
  const [timeRange, setTimeRange] = useState('24h');
  const [autoRefresh, setAutoRefresh] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(new Date());
  const [viewMode, setViewMode] = useState('overview');

  useEffect(() => {
    if (!autoRefresh) return;
    
    const interval = setInterval(() => {
      setLastUpdate(new Date());
    }, 10000);

    return () => clearInterval(interval);
  }, [autoRefresh]);

  const stations = {
    downtown: {
      name: 'Downtown Station',
      location: 'City Center',
      coordinates: '40.7128°N, 74.0060°W',
      aqi: 87,
      status: 'moderate',
      pollutants: {
        pm25: { value: 35.2, unit: 'µg/m³', level: 'moderate' },
        pm10: { value: 52.8, unit: 'µg/m³', level: 'moderate' },
        o3: { value: 68.5, unit: 'ppb', level: 'moderate' },
        no2: { value: 42.1, unit: 'ppb', level: 'moderate' },
        so2: { value: 8.3, unit: 'ppb', level: 'good' },
        co: { value: 0.6, unit: 'ppm', level: 'good' }
      },
      weather: {
        temp: 24,
        humidity: 65,
        windSpeed: 12,
        windDirection: 'NE',
        pressure: 1013
      },
      dominantPollutant: 'PM2.5'
    },
    industrial: {
      name: 'Industrial Zone',
      location: 'East District',
      coordinates: '40.7138°N, 74.0070°W',
      aqi: 142,
      status: 'unhealthy-sensitive',
      pollutants: {
        pm25: { value: 68.4, unit: 'µg/m³', level: 'unhealthy-sensitive' },
        pm10: { value: 95.2, unit: 'µg/m³', level: 'unhealthy-sensitive' },
        o3: { value: 52.3, unit: 'ppb', level: 'moderate' },
        no2: { value: 78.6, unit: 'ppb', level: 'unhealthy-sensitive' },
        so2: { value: 24.5, unit: 'ppb', level: 'moderate' },
        co: { value: 1.8, unit: 'ppm', level: 'moderate' }
      },
      weather: {
        temp: 26,
        humidity: 58,
        windSpeed: 8,
        windDirection: 'SW',
        pressure: 1011
      },
      dominantPollutant: 'PM2.5'
    },
    suburban: {
      name: 'Suburban Area',
      location: 'Green Valley',
      coordinates: '40.7108°N, 74.0040°W',
      aqi: 45,
      status: 'good',
      pollutants: {
        pm25: { value: 12.3, unit: 'µg/m³', level: 'good' },
        pm10: { value: 28.5, unit: 'µg/m³', level: 'good' },
        o3: { value: 42.8, unit: 'ppb', level: 'good' },
        no2: { value: 18.2, unit: 'ppb', level: 'good' },
        so2: { value: 3.1, unit: 'ppb', level: 'good' },
        co: { value: 0.3, unit: 'ppm', level: 'good' }
      },
      weather: {
        temp: 22,
        humidity: 72,
        windSpeed: 15,
        windDirection: 'N',
        pressure: 1015
      },
      dominantPollutant: 'O3'
    }
  };

  const station = stations[selectedStation];

  // Historical data for charts
  const generateHistoricalData = () => {
    const hours = timeRange === '24h' ? 24 : timeRange === '7d' ? 168 : 48;
    const data = [];
    for (let i = hours; i >= 0; i--) {
      data.push({
        time: timeRange === '24h' ? `${i}h ago` : `${Math.floor(i / 24)}d ago`,
        aqi: Math.floor(Math.random() * 50) + station.aqi - 25,
        pm25: station.pollutants.pm25.value + (Math.random() - 0.5) * 20,
        pm10: station.pollutants.pm10.value + (Math.random() - 0.5) * 30,
        o3: station.pollutants.o3.value + (Math.random() - 0.5) * 15,
        no2: station.pollutants.no2.value + (Math.random() - 0.5) * 20
      });
    }
    return data.reverse();
  };

  const historicalData = generateHistoricalData();

  const pollutantDistribution = [
    { name: 'PM2.5', value: station.pollutants.pm25.value, color: '#8B5CF6' },
    { name: 'PM10', value: station.pollutants.pm10.value, color: '#EC4899' },
    { name: 'O3', value: station.pollutants.o3.value, color: '#F59E0B' },
    { name: 'NO2', value: station.pollutants.no2.value, color: '#3B82F6' },
    { name: 'SO2', value: station.pollutants.so2.value, color: '#10B981' },
    { name: 'CO', value: station.pollutants.co.value * 10, color: '#EF4444' }
  ];

  const getAQIColor = (aqi) => {
    if (aqi <= 50) return { bg: 'bg-green-500', text: 'text-green-500', light: 'bg-green-50' };
    if (aqi <= 100) return { bg: 'bg-yellow-500', text: 'text-yellow-500', light: 'bg-yellow-50' };
    if (aqi <= 150) return { bg: 'bg-orange-500', text: 'text-orange-500', light: 'bg-orange-50' };
    if (aqi <= 200) return { bg: 'bg-red-500', text: 'text-red-500', light: 'bg-red-50' };
    if (aqi <= 300) return { bg: 'bg-purple-500', text: 'text-purple-500', light: 'bg-purple-50' };
    return { bg: 'bg-red-900', text: 'text-red-900', light: 'bg-red-100' };
  };

  const getStatusLabel = (status) => {
    const labels = {
      'good': 'Good',
      'moderate': 'Moderate',
      'unhealthy-sensitive': 'Unhealthy for Sensitive Groups',
      'unhealthy': 'Unhealthy',
      'very-unhealthy': 'Very Unhealthy',
      'hazardous': 'Hazardous'
    };
    return labels[status] || status;
  };

  const getHealthAdvice = (aqi) => {
    if (aqi <= 50) return {
      general: 'Air quality is excellent. Perfect day for outdoor activities.',
      sensitive: 'No health concerns for any groups.',
      icon: '😊'
    };
    if (aqi <= 100) return {
      general: 'Air quality is acceptable. Most people can enjoy outdoor activities.',
      sensitive: 'Unusually sensitive people should consider reducing prolonged outdoor exertion.',
      icon: '🙂'
    };
    if (aqi <= 150) return {
      general: 'Members of sensitive groups may experience health effects.',
      sensitive: 'Children, elderly, and people with respiratory conditions should limit prolonged outdoor exertion.',
      icon: '😐'
    };
    if (aqi <= 200) return {
      general: 'Everyone may begin to experience health effects.',
      sensitive: 'Sensitive groups should avoid outdoor activities. General public should limit prolonged exertion.',
      icon: '😟'
    };
    return {
      general: 'Health alert: Everyone may experience serious health effects.',
      sensitive: 'Everyone should avoid outdoor activities.',
      icon: '😷'
    };
  };

  const healthAdvice = getHealthAdvice(station.aqi);
  const aqiColor = getAQIColor(station.aqi);

  const PollutantCard = ({ name, icon: Icon, data }) => (
    <div className="bg-white rounded-xl p-5 shadow-md hover:shadow-lg transition-all border border-gray-100">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          <Icon className="w-5 h-5 text-gray-600" />
          <span className="font-semibold text-gray-800">{name}</span>
        </div>
        <span className={`text-xs px-3 py-1 rounded-full font-medium ${
          data.level === 'good' ? 'bg-green-100 text-green-700' :
          data.level === 'moderate' ? 'bg-yellow-100 text-yellow-700' :
          'bg-orange-100 text-orange-700'
        }`}>
          {data.level}
        </span>
      </div>
      <div className="flex items-baseline gap-2">
        <span className="text-3xl font-bold text-gray-800">{data.value}</span>
        <span className="text-sm text-gray-500">{data.unit}</span>
      </div>
    </div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-50">
      {/* Header */}
      <div className="bg-white shadow-lg border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-6 py-4">
          <div className="flex items-center justify-between flex-wrap gap-4">
            <div className="flex items-center gap-3">
              <Wind className="w-8 h-8 text-blue-600" />
              <div>
                <h1 className="text-2xl font-bold text-gray-800">AirWatch</h1>
                <p className="text-sm text-gray-500">Real-Time Air Quality Monitoring</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              <div className="text-right">
                <div className="text-xs text-gray-500">Last Updated</div>
                <div className="flex items-center gap-2">
                  <Clock className="w-3 h-3 text-gray-400" />
                  <span className="text-sm font-medium text-gray-700">
                    {lastUpdate.toLocaleTimeString()}
                  </span>
                </div>
              </div>
              <button
                onClick={() => setAutoRefresh(!autoRefresh)}
                className={`p-2 rounded-lg transition-all ${
                  autoRefresh ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700'
                }`}
              >
                <RefreshCw className={`w-5 h-5 ${autoRefresh ? 'animate-spin' : ''}`} />
              </button>
              <button className="p-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition-all">
                <Download className="w-5 h-5" />
              </button>
              <button className="p-2 rounded-lg bg-gray-200 text-gray-700 hover:bg-gray-300 transition-all">
                <Share2 className="w-5 h-5" />
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-6 py-8">
        {/* Station Selector */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
          {Object.entries(stations).map(([key, s]) => {
            const color = getAQIColor(s.aqi);
            return (
              <button
                key={key}
                onClick={() => setSelectedStation(key)}
                className={`text-left p-5 rounded-xl transition-all ${
                  selectedStation === key
                    ? 'bg-white shadow-xl scale-105 ring-4 ring-blue-500 ring-opacity-50'
                    : 'bg-white hover:shadow-lg hover:scale-102 shadow-md'
                }`}
              >
                <div className="flex items-start justify-between mb-3">
                  <div>
                    <h3 className="font-bold text-lg text-gray-800">{s.name}</h3>
                    <p className="text-sm text-gray-500 flex items-center gap-1 mt-1">
                      <MapPin className="w-3 h-3" />
                      {s.location}
                    </p>
                  </div>
                  <div className={`w-3 h-3 rounded-full ${color.bg} animate-pulse`} />
                </div>
                <div className="flex items-end gap-2">
                  <span className={`text-4xl font-bold ${color.text}`}>{s.aqi}</span>
                  <span className="text-sm text-gray-500 mb-1">AQI</span>
                </div>
                <div className={`mt-2 text-xs px-2 py-1 rounded-full inline-block ${color.light} ${color.text} font-medium`}>
                  {getStatusLabel(s.status)}
                </div>
              </button>
            );
          })}
        </div>

        {/* Main AQI Display */}
        <div className={`${aqiColor.light} rounded-xl p-8 mb-8 shadow-lg border-l-8 ${aqiColor.bg}`}>
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
            <div className="lg:col-span-2">
              <div className="flex items-center gap-3 mb-4">
                <span className="text-4xl">{healthAdvice.icon}</span>
                <div>
                  <h2 className="text-2xl font-bold text-gray-800">Current Air Quality</h2>
                  <p className="text-gray-600">{station.name}</p>
                </div>
              </div>
              <div className="mb-4">
                <div className="flex items-baseline gap-3 mb-2">
                  <span className={`text-6xl font-bold ${aqiColor.text}`}>{station.aqi}</span>
                  <span className="text-2xl text-gray-600">AQI</span>
                </div>
                <p className={`text-lg font-semibold ${aqiColor.text}`}>
                  {getStatusLabel(station.status)}
                </p>
              </div>
              <div className="space-y-2">
                <div className={`flex items-start gap-2 p-3 rounded-lg bg-white bg-opacity-50`}>
                  <Activity className="w-5 h-5 text-gray-600 mt-0.5" />
                  <div>
                    <p className="font-medium text-gray-800">General Public</p>
                    <p className="text-sm text-gray-700">{healthAdvice.general}</p>
                  </div>
                </div>
                <div className={`flex items-start gap-2 p-3 rounded-lg bg-white bg-opacity-50`}>
                  <AlertTriangle className="w-5 h-5 text-orange-600 mt-0.5" />
                  <div>
                    <p className="font-medium text-gray-800">Sensitive Groups</p>
                    <p className="text-sm text-gray-700">{healthAdvice.sensitive}</p>
                  </div>
                </div>
              </div>
            </div>
            <div>
              <div className="bg-white bg-opacity-70 rounded-lg p-5">
                <h3 className="font-semibold text-gray-800 mb-4">Dominant Pollutant</h3>
                <div className="text-center mb-4">
                  <div className={`text-5xl font-bold ${aqiColor.text} mb-2`}>
                    {station.dominantPollutant}
                  </div>
                  <p className="text-sm text-gray-600">Primary contributor to AQI</p>
                </div>
                <div className="space-y-3 mt-4">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Temperature</span>
                    <span className="font-semibold text-gray-800">{station.weather.temp}°C</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Humidity</span>
                    <span className="font-semibold text-gray-800">{station.weather.humidity}%</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Wind</span>
                    <span className="font-semibold text-gray-800">
                      {station.weather.windSpeed} km/h {station.weather.windDirection}
                    </span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-600">Pressure</span>
                    <span className="font-semibold text-gray-800">{station.weather.pressure} hPa</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* View Mode Selector */}
        <div className="flex gap-3 mb-6">
          {['overview', 'trends', 'details'].map(mode => (
            <button
              key={mode}
              onClick={() => setViewMode(mode)}
              className={`px-6 py-2 rounded-lg font-medium transition-all ${
                viewMode === mode
                  ? 'bg-blue-500 text-white shadow-lg'
                  : 'bg-white text-gray-700 hover:bg-gray-50 shadow-md'
              }`}
            >
              {mode.charAt(0).toUpperCase() + mode.slice(1)}
            </button>
          ))}
        </div>

        {/* Overview Mode */}
        {viewMode === 'overview' && (
          <div className="space-y-6">
            {/* Pollutants Grid */}
            <div>
              <h2 className="text-xl font-bold text-gray-800 mb-4 flex items-center gap-2">
                <Cigarette className="w-6 h-6 text-purple-600" />
                Key Pollutants
              </h2>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <PollutantCard name="PM2.5" icon={Activity} data={station.pollutants.pm25} />
                <PollutantCard name="PM10" icon={Activity} data={station.pollutants.pm10} />
                <PollutantCard name="Ozone (O3)" icon={Wind} data={station.pollutants.o3} />
                <PollutantCard name="NO2" icon={Factory} data={station.pollutants.no2} />
                <PollutantCard name="SO2" icon={Car} data={station.pollutants.so2} />
                <PollutantCard name="CO" icon={Cigarette} data={station.pollutants.co} />
              </div>
            </div>

            {/* Pollutant Distribution */}
            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-lg font-bold text-gray-800 mb-4">Pollutant Distribution</h3>
              <ResponsiveContainer width="100%" height={300}>
                <PieChart>
                  <Pie
                    data={pollutantDistribution}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}
                    outerRadius={100}
                    fill="#8884d8"
                    dataKey="value"
                  >
                    {pollutantDistribution.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.color} />
                    ))}
                  </Pie>
                  <Tooltip />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}

        {/* Trends Mode */}
        {viewMode === 'trends' && (
          <div className="space-y-6">
            {/* Time Range Selector */}
            <div className="flex gap-3 mb-4">
              {['24h', '48h', '7d'].map(range => (
                <button
                  key={range}
                  onClick={() => setTimeRange(range)}
                  className={`px-4 py-2 rounded-lg font-medium transition-all ${
                    timeRange === range
                      ? 'bg-blue-500 text-white'
                      : 'bg-white text-gray-700 hover:bg-gray-50'
                  }`}
                >
                  {range === '24h' ? '24 Hours' : range === '48h' ? '48 Hours' : '7 Days'}
                </button>
              ))}
            </div>

            {/* AQI Trend */}
            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-lg font-bold text-gray-800 mb-4">AQI Trend</h3>
              <ResponsiveContainer width="100%" height={300}>
                <AreaChart data={historicalData}>
                  <defs>
                    <linearGradient id="colorAqi" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor="#3B82F6" stopOpacity={0.8}/>
                      <stop offset="95%" stopColor="#3B82F6" stopOpacity={0}/>
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
                  <XAxis dataKey="time" stroke="#6B7280" />
                  <YAxis stroke="#6B7280" />
                  <Tooltip />
                  <Area type="monotone" dataKey="aqi" stroke="#3B82F6" fillOpacity={1} fill="url(#colorAqi)" />
                </AreaChart>
              </ResponsiveContainer>
            </div>

            {/* Pollutant Trends */}
            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-lg font-bold text-gray-800 mb-4">Pollutant Levels Over Time</h3>
              <ResponsiveContainer width="100%" height={350}>
                <LineChart data={historicalData}>
                  <CartesianGrid strokeDasharray="3 3" stroke="#E5E7EB" />
                  <XAxis dataKey="time" stroke="#6B7280" />
                  <YAxis stroke="#6B7280" />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="pm25" stroke="#8B5CF6" strokeWidth={2} name="PM2.5" />
                  <Line type="monotone" dataKey="pm10" stroke="#EC4899" strokeWidth={2} name="PM10" />
                  <Line type="monotone" dataKey="o3" stroke="#F59E0B" strokeWidth={2} name="O3" />
                  <Line type="monotone" dataKey="no2" stroke="#3B82F6" strokeWidth={2} name="NO2" />
                </LineChart>
              </ResponsiveContainer>
            </div>
          </div>
        )}

        {/* Details Mode */}
        {viewMode === 'details' && (
          <div className="space-y-6">
            {/* Information Cards */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <TreePine className="w-5 h-5 text-green-600" />
                  About AQI
                </h3>
                <div className="space-y-3 text-sm text-gray-700">
                  <p>The Air Quality Index (AQI) is a standardized indicator of air quality. It tells you how clean or polluted the air is and what health effects might be a concern.</p>
                  <div className="space-y-2">
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-green-500 rounded"></div>
                      <span>0-50: Good</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-yellow-500 rounded"></div>
                      <span>51-100: Moderate</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-orange-500 rounded"></div>
                      <span>101-150: Unhealthy for Sensitive Groups</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-red-500 rounded"></div>
                      <span>151-200: Unhealthy</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-purple-500 rounded"></div>
                      <span>201-300: Very Unhealthy</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <div className="w-12 h-4 bg-red-900 rounded"></div>
                      <span>301+: Hazardous</span>
                    </div>
                  </div>
                </div>
              </div>

              <div className="bg-white rounded-xl p-6 shadow-lg">
                <h3 className="text-lg font-bold text-gray-800 mb-4 flex items-center gap-2">
                  <Activity className="w-5 h-5 text-blue-600" />
                  Pollutant Information
                </h3>
                <div className="space-y-3 text-sm text-gray-700">
                  <div>
                    <p className="font-semibold text-gray-800">PM2.5 & PM10</p>
                    <p>Particulate matter that can penetrate deep into lungs. Main sources: combustion, industrial processes.</p>
                  </div>
                  <div>
                    <p className="font-semibold text-gray-800">Ozone (O3)</p>
                    <p>Ground-level ozone forms when pollutants react in sunlight. Can cause respiratory problems.</p>
                  </div>
                  <div>
                    <p className="font-semibold text-gray-800">NO2 & SO2</p>
                    <p>Nitrogen and sulfur dioxide from vehicle emissions and industrial processes.</p>
                  </div>
                  <div>
                    <p className="font-semibold text-gray-800">CO</p>
                    <p>Carbon monoxide from incomplete combustion. Reduces oxygen delivery to organs.</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Station Details */}
            <div className="bg-white rounded-xl p-6 shadow-lg">
              <h3 className="text-lg font-bold text-gray-800 mb-4">Station Information</h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                <div>
                  <p className="text-sm text-gray-500 mb-1">Location</p>
                  <p className="font-semibold text-gray-800">{station.location}</p>
                  <p className="text-xs text-gray-500 font-mono mt-1">{station.coordinates}</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Station Type</p>
                  <p className="font-semibold text-gray-800">Continuous Monitoring</p>
                  <p className="text-xs text-gray-500 mt-1">Updates every 10 minutes</p>
                </div>
                <div>
                  <p className="text-sm text-gray-500 mb-1">Sensors Active</p>
                  <p className="font-semibold text-gray-800">6 Pollutant Sensors</p>
                  <p className="text-xs text-gray-500 mt-1">All systems operational</p>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AirQualityMonitoring;
