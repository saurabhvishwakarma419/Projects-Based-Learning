import React, { useState, useEffect } from 'react';
import { Navigation, Clock, AlertCircle, CheckCircle, Activity, TrendingUp, TrendingDown, Settings } from 'lucide-react';

export default function SmartTrafficManagement() {
  const [isSimulating, setIsSimulating] = useState(false);
  const [time, setTime] = useState(0);
  const [mode, setMode] = useState('adaptive'); // adaptive or fixed
  
  const [intersections, setIntersections] = useState([
    { 
      id: 1, 
      name: 'Main & 1st Ave', 
      traffic: { north: 45, south: 38, east: 52, west: 41 },
      signal: { current: 'north-south', timer: 30, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'medium',
      waitTime: 12,
      throughput: 0,
      coordinates: { x: 2, y: 1 }
    },
    { 
      id: 2, 
      name: 'Main & 2nd Ave', 
      traffic: { north: 78, south: 82, east: 35, west: 28 },
      signal: { current: 'east-west', timer: 20, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'high',
      waitTime: 28,
      throughput: 0,
      coordinates: { x: 2, y: 2 }
    },
    { 
      id: 3, 
      name: 'Oak St & 1st Ave', 
      traffic: { north: 32, south: 28, east: 41, west: 38 },
      signal: { current: 'north-south', timer: 25, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'low',
      waitTime: 8,
      throughput: 0,
      coordinates: { x: 1, y: 1 }
    },
    { 
      id: 4, 
      name: 'Oak St & 2nd Ave', 
      traffic: { north: 91, south: 88, east: 72, west: 68 },
      signal: { current: 'east-west', timer: 15, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'critical',
      waitTime: 35,
      throughput: 0,
      coordinates: { x: 1, y: 2 }
    },
    { 
      id: 5, 
      name: 'Pine Rd & 1st Ave', 
      traffic: { north: 55, south: 48, east: 62, west: 58 },
      signal: { current: 'east-west', timer: 22, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'medium',
      waitTime: 15,
      throughput: 0,
      coordinates: { x: 3, y: 1 }
    },
    { 
      id: 6, 
      name: 'Pine Rd & 2nd Ave', 
      traffic: { north: 42, south: 38, east: 45, west: 41 },
      signal: { current: 'north-south', timer: 28, cycle: ['north-south', 'east-west'] },
      congestionLevel: 'low',
      waitTime: 10,
      throughput: 0,
      coordinates: { x: 3, y: 2 }
    }
  ]);

  const [stats, setStats] = useState({
    totalVehicles: 0,
    avgWaitTime: 0,
    congestionReduction: 0,
    efficiency: 0
  });

  // Adaptive traffic management algorithm
  const calculateOptimalTiming = (intersection) => {
    const nsTraffic = intersection.traffic.north + intersection.traffic.south;
    const ewTraffic = intersection.traffic.east + intersection.traffic.west;
    const total = nsTraffic + ewTraffic;
    
    if (total === 0) return { ns: 30, ew: 30 };
    
    const nsRatio = nsTraffic / total;
    const ewRatio = ewTraffic / total;
    
    const minTime = 20;
    const maxTime = 60;
    const totalTime = 80;
    
    let nsTime = Math.round(totalTime * nsRatio);
    let ewTime = Math.round(totalTime * ewRatio);
    
    nsTime = Math.max(minTime, Math.min(maxTime, nsTime));
    ewTime = Math.max(minTime, Math.min(maxTime, ewTime));
    
    return { ns: nsTime, ew: ewTime };
  };

  const getCongestionLevel = (traffic) => {
    const avg = (traffic.north + traffic.south + traffic.east + traffic.west) / 4;
    if (avg > 80) return 'critical';
    if (avg > 65) return 'high';
    if (avg > 40) return 'medium';
    return 'low';
  };

  const getCongestionColor = (level) => {
    switch(level) {
      case 'critical': return 'bg-purple-600';
      case 'high': return 'bg-red-500';
      case 'medium': return 'bg-yellow-500';
      case 'low': return 'bg-green-500';
      default: return 'bg-gray-500';
    }
  };

  const getSignalColor = (signal, direction) => {
    if (signal.current === direction) return 'bg-green-500';
    return 'bg-red-500';
  };

  // Simulation logic
  useEffect(() => {
    if (!isSimulating) return;

    const interval = setInterval(() => {
      setTime(t => t + 1);

      setIntersections(prev => prev.map(int => {
        let newTimer = int.signal.timer - 1;
        let newSignal = { ...int.signal };
        let newTraffic = { ...int.traffic };
        let throughput = 0;

        // Signal timing logic
        if (newTimer <= 0) {
          const currentIndex = newSignal.cycle.indexOf(newSignal.current);
          const nextIndex = (currentIndex + 1) % newSignal.cycle.length;
          newSignal.current = newSignal.cycle[nextIndex];
          
          if (mode === 'adaptive') {
            const timing = calculateOptimalTiming(int);
            newTimer = newSignal.current === 'north-south' ? timing.ns : timing.ew;
          } else {
            newTimer = 30;
          }
        }

        // Traffic flow simulation
        Object.keys(newTraffic).forEach(dir => {
          const isGreen = (newSignal.current === 'north-south' && (dir === 'north' || dir === 'south')) ||
                         (newSignal.current === 'east-west' && (dir === 'east' || dir === 'west'));
          
          if (isGreen) {
            const reduction = Math.random() * 15 + 10;
            throughput += reduction;
            newTraffic[dir] = Math.max(15, newTraffic[dir] - reduction);
          } else {
            const increase = Math.random() * 8 + 2;
            newTraffic[dir] = Math.min(100, newTraffic[dir] + increase);
          }
        });

        const congestionLevel = getCongestionLevel(newTraffic);
        const avgTraffic = (newTraffic.north + newTraffic.south + newTraffic.east + newTraffic.west) / 4;
        const waitTime = Math.round((100 - avgTraffic) * 0.4);

        return {
          ...int,
          signal: { ...newSignal, timer: newTimer },
          traffic: newTraffic,
          congestionLevel,
          waitTime,
          throughput: Math.round(throughput)
        };
      }));

      // Update statistics
      setStats(prev => {
        const totalVehicles = intersections.reduce((sum, int) => 
          sum + int.traffic.north + int.traffic.south + int.traffic.east + int.traffic.west, 0
        );
        const avgWaitTime = Math.round(
          intersections.reduce((sum, int) => sum + int.waitTime, 0) / intersections.length
        );
        const efficiency = Math.round(100 - (totalVehicles / (intersections.length * 400)) * 100);
        
        return {
          totalVehicles: Math.round(totalVehicles),
          avgWaitTime,
          congestionReduction: Math.min(100, Math.max(0, efficiency)),
          efficiency
        };
      });

    }, 1000);

    return () => clearInterval(interval);
  }, [isSimulating, mode, intersections]);

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-blue-900 to-slate-900 text-white p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-5xl font-bold mb-3 bg-gradient-to-r from-blue-400 via-cyan-400 to-teal-400 bg-clip-text text-transparent">
            Smart Traffic Management System
          </h1>
          <p className="text-gray-300 text-lg">AI-Powered Traffic Flow Optimization</p>
        </div>

        {/* Control Panel */}
        <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6 mb-6 shadow-2xl border border-slate-700">
          <div className="flex flex-wrap justify-between items-center gap-4">
            <div className="flex gap-3">
              <button
                onClick={() => setIsSimulating(!isSimulating)}
                className={`px-8 py-3 rounded-lg font-semibold transition-all shadow-lg ${
                  isSimulating 
                    ? 'bg-red-500 hover:bg-red-600 shadow-red-500/50' 
                    : 'bg-green-500 hover:bg-green-600 shadow-green-500/50'
                }`}
              >
                {isSimulating ? '⏸ Pause Simulation' : '▶ Start Simulation'}
              </button>
              
              <button
                onClick={() => setMode(mode === 'adaptive' ? 'fixed' : 'adaptive')}
                className={`px-6 py-3 rounded-lg font-semibold transition-all flex items-center gap-2 ${
                  mode === 'adaptive'
                    ? 'bg-blue-500 hover:bg-blue-600 shadow-lg shadow-blue-500/50'
                    : 'bg-gray-600 hover:bg-gray-700'
                }`}
              >
                <Settings size={20} />
                {mode === 'adaptive' ? 'Adaptive Mode' : 'Fixed Mode'}
              </button>
            </div>

            <div className="flex items-center gap-2 bg-slate-700/50 px-4 py-2 rounded-lg">
              <Clock size={20} className="text-blue-400" />
              <span className="font-mono text-lg">{Math.floor(time / 60)}:{(time % 60).toString().padStart(2, '0')}</span>
            </div>
          </div>
        </div>

        {/* Statistics Dashboard */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/20 border border-blue-500/50 rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between mb-2">
              <Activity className="text-blue-400" size={24} />
              <TrendingDown className="text-green-400" size={20} />
            </div>
            <div className="text-3xl font-bold text-blue-400 mb-1">{stats.totalVehicles}</div>
            <div className="text-sm text-gray-300">Total Vehicles</div>
          </div>

          <div className="bg-gradient-to-br from-cyan-500/20 to-cyan-600/20 border border-cyan-500/50 rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between mb-2">
              <Clock className="text-cyan-400" size={24} />
              <TrendingDown className="text-green-400" size={20} />
            </div>
            <div className="text-3xl font-bold text-cyan-400 mb-1">{stats.avgWaitTime}s</div>
            <div className="text-sm text-gray-300">Avg Wait Time</div>
          </div>

          <div className="bg-gradient-to-br from-green-500/20 to-green-600/20 border border-green-500/50 rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between mb-2">
              <TrendingUp className="text-green-400" size={24} />
              <CheckCircle className="text-green-400" size={20} />
            </div>
            <div className="text-3xl font-bold text-green-400 mb-1">{stats.congestionReduction}%</div>
            <div className="text-sm text-gray-300">Efficiency Score</div>
          </div>

          <div className="bg-gradient-to-br from-purple-500/20 to-purple-600/20 border border-purple-500/50 rounded-xl p-6 shadow-xl">
            <div className="flex items-center justify-between mb-2">
              <Navigation className="text-purple-400" size={24} />
              <Activity className="text-purple-400" size={20} />
            </div>
            <div className="text-3xl font-bold text-purple-400 mb-1">{intersections.length}</div>
            <div className="text-sm text-gray-300">Active Intersections</div>
          </div>
        </div>

        {/* Traffic Grid View */}
        <div className="bg-slate-800/50 backdrop-blur rounded-xl p-6 mb-6 shadow-2xl border border-slate-700">
          <h2 className="text-2xl font-bold mb-6 flex items-center gap-3">
            <Navigation className="text-blue-400" size={28} />
            Live Traffic Network
          </h2>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {intersections.map(int => (
              <div key={int.id} className="bg-slate-700/50 rounded-xl p-5 border border-slate-600 hover:border-slate-500 transition-all shadow-lg">
                {/* Header */}
                <div className="flex justify-between items-start mb-4">
                  <div>
                    <h3 className="font-bold text-lg text-white">{int.name}</h3>
                    <p className="text-sm text-gray-400">Intersection #{int.id}</p>
                  </div>
                  <div className="flex gap-2">
                    <div className={`w-12 h-12 rounded-full ${getSignalColor(int.signal, 'north-south')} shadow-lg flex items-center justify-center text-xs font-bold`}>
                      N/S
                    </div>
                    <div className={`w-12 h-12 rounded-full ${getSignalColor(int.signal, 'east-west')} shadow-lg flex items-center justify-center text-xs font-bold`}>
                      E/W
                    </div>
                  </div>
                </div>

                {/* Timer */}
                <div className="bg-slate-800 rounded-lg p-3 mb-4 text-center">
                  <div className="text-2xl font-mono font-bold text-blue-400">{int.signal.timer}s</div>
                  <div className="text-xs text-gray-400 uppercase tracking-wider mt-1">
                    {int.signal.current === 'north-south' ? 'North-South Green' : 'East-West Green'}
                  </div>
                </div>

                {/* Traffic Directions */}
                <div className="grid grid-cols-2 gap-3 mb-4">
                  {Object.entries(int.traffic).map(([dir, value]) => (
                    <div key={dir} className="bg-slate-800/50 rounded p-2">
                      <div className="text-xs text-gray-400 uppercase mb-1">{dir}</div>
                      <div className="flex items-center gap-2">
                        <div className="flex-1 bg-slate-600 rounded-full h-2">
                          <div 
                            className={`h-2 rounded-full transition-all ${
                              value > 80 ? 'bg-red-500' :
                              value > 65 ? 'bg-orange-500' :
                              value > 40 ? 'bg-yellow-500' : 'bg-green-500'
                            }`}
                            style={{ width: `${value}%` }}
                          />
                        </div>
                        <span className="text-xs font-bold text-white w-8">{Math.round(value)}</span>
                      </div>
                    </div>
                  ))}
                </div>

                {/* Status */}
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-400">Congestion:</span>
                    <span className={`px-3 py-1 rounded-full text-xs font-bold ${getCongestionColor(int.congestionLevel)} bg-opacity-20 border ${
                      int.congestionLevel === 'critical' ? 'border-purple-500 text-purple-400' :
                      int.congestionLevel === 'high' ? 'border-red-500 text-red-400' :
                      int.congestionLevel === 'medium' ? 'border-yellow-500 text-yellow-400' :
                      'border-green-500 text-green-400'
                    }`}>
                      {int.congestionLevel.toUpperCase()}
                    </span>
                  </div>
                  
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-gray-400">Wait Time:</span>
                    <span className="font-bold text-white">{int.waitTime}s</span>
                  </div>

                  {int.throughput > 0 && (
                    <div className="flex items-center gap-2 text-xs text-green-400 bg-green-500/10 p-2 rounded border border-green-500/30">
                      <TrendingUp size={14} />
                      <span>{int.throughput} vehicles cleared</span>
                    </div>
                  )}

                  {int.congestionLevel === 'critical' && (
                    <div className="flex items-center gap-2 text-xs text-purple-400 bg-purple-500/10 p-2 rounded border border-purple-500/30">
                      <AlertCircle size={14} />
                      <span>Critical congestion detected</span>
                    </div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* System Info */}
        <div className="bg-gradient-to-r from-blue-500/10 to-cyan-500/10 border border-blue-500/30 rounded-xl p-6 shadow-xl">
          <h3 className="text-xl font-bold mb-3 text-blue-400">System Features</h3>
          <div className="grid md:grid-cols-2 gap-4 text-sm text-gray-300">
            <div className="flex items-start gap-3">
              <CheckCircle className="text-green-400 flex-shrink-0 mt-1" size={18} />
              <div>
                <div className="font-semibold text-white mb-1">Adaptive Signal Timing</div>
                <div>Automatically adjusts green light duration based on real-time traffic density</div>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <CheckCircle className="text-green-400 flex-shrink-0 mt-1" size={18} />
              <div>
                <div className="font-semibold text-white mb-1">Multi-Directional Monitoring</div>
                <div>Tracks traffic flow from all four directions at each intersection</div>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <CheckCircle className="text-green-400 flex-shrink-0 mt-1" size={18} />
              <div>
                <div className="font-semibold text-white mb-1">Congestion Detection</div>
                <div>Real-time identification and classification of traffic congestion levels</div>
              </div>
            </div>
            <div className="flex items-start gap-3">
              <CheckCircle className="text-green-400 flex-shrink-0 mt-1" size={18} />
              <div>
                <div className="font-semibold text-white mb-1">Performance Analytics</div>
                <div>Continuous monitoring of wait times, throughput, and system efficiency</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
